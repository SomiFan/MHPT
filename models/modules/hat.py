"""
hat.py 2023/2/26 16:10
Written by Wensheng Fan
"""
import torch
import torch.nn as nn
import torch.utils.checkpoint as checkpoint
from timm.models.layers import DropPath, to_2tuple, trunc_normal_


class ResBlockSC(nn.Module):
    """Depth-Wise res-block"""

    def __init__(self, inplanes, planes, ks=3):
        super(ResBlockSC, self).__init__()

        self.conv1 = nn.Conv2d(inplanes, planes, 1)
        self.act1 = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(planes, planes, ks, 1, padding=(ks - 1) // 2, groups=planes, bias=True)
        self.act2 = nn.ReLU(inplace=True)
        self.conv3 = nn.Conv2d(planes, inplanes, 1)

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.act1(out)
        out = self.conv2(out)
        out = self.act2(out)
        out = self.conv3(out)
        out += residual
        return out


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act1 = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.act2 = act_layer()

    def forward(self, x):
        x = self.fc1(x)
        x = self.act1(x)
        x = self.fc2(x)
        x = self.act2(x)
        return x


def window_partition(x, window_size):
    """
    Args:
        x: (B, H, W, C)
        window_size (int): window size

    Returns:
        windows: (num_windows*B, window_size, window_size, C)
    """
    B, H, W, C = x.shape
    x = x.view(B, H // window_size, window_size, W // window_size, window_size, C)
    windows = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C)
    return windows


def window_reverse(windows, window_size, H, W):
    """
    Args:
        windows: (num_windows*B, window_size, window_size, C)
        window_size (int): Window size
        H (int): Height of image
        W (int): Width of image

    Returns:
        x: (B, H, W, C)
    """
    B = int(windows.shape[0] / (H * W / window_size / window_size))
    x = windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)
    x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)
    return x


class SPWAttention(nn.Module):
    r""" Scaled Parallel Window Attention (SPWA) module with relative position bias.
    It supports both of shifted and non-shifted window.
    scaling factor is adaptive generated by the keys of ms and pan to perceive the potential relationship
    between multi-modal keys and adjust the attention score of self-attention and cross-attention matrices.

    Args:
        dim (int): Number of input channels.
        window_size (tuple[int]): The height and width of the window.
        num_heads (int): Number of attention heads.
        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set
        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0
        proj_drop (float, optional): Dropout ratio of output. Default: 0.0
    """

    def __init__(self, dim, num_heads, head_dim, window_size, qkv_bias=True, qk_scale=None):

        super().__init__()
        self.window_size = window_size  # Wh, Ww
        self.num_heads = num_heads
        self.embed_dim = num_heads * head_dim
        self.head_dim = head_dim
        self.scale = qk_scale or head_dim ** -0.5
        n_tokens = window_size[0] * window_size[1]

        # define a parameter table of relative position bias
        self.rpb_table_x = nn.Parameter(
            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads))  # 2*Wh-1 * 2*Ww-1, nH
        self.rpb_table_y = nn.Parameter(
            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads))

        # get pair-wise relative position index for each token inside the window
        coords_h = torch.arange(self.window_size[0])
        coords_w = torch.arange(self.window_size[1])
        coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
        coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
        relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
        relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
        relative_coords[:, :, 1] += self.window_size[1] - 1
        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
        self.register_buffer("relative_position_index", relative_position_index)

        self.qkv = nn.Linear(dim, self.embed_dim * 3, bias=qkv_bias)
        self.kv = nn.Linear(dim, self.embed_dim * 2, bias=qkv_bias)
        self.proj = nn.Linear(self.embed_dim, dim)

        trunc_normal_(self.rpb_table_x, std=.02)
        trunc_normal_(self.rpb_table_y, std=.02)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, x, y):
        """
        Args:
            x: input features with shape of (num_windows*B, N, C)
            y: input features of pan image
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        B_, N, C = x.shape
        qkv = self.qkv(x).reshape(B_, N, 3, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
        q, k_x, v_x = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)

        kv = self.kv(y).reshape(B_, N, 2, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
        k_y, v_y = kv[0], kv[1]  # B_, nh, N, hd

        k = torch.cat((k_x, k_y), dim=-2)
        v = torch.cat((v_x, v_y), dim=-2)

        # dot product
        q = q * self.scale
        attn = torch.matmul(q, k.transpose(-2, -1))

        rpb_x = self.rpb_table_x[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
        rpb_x = rpb_x.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
        rpb_y = self.rpb_table_y[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
        rpb_y = rpb_y.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
        relative_position_bias = torch.cat((rpb_x, rpb_y), dim=-1)

        attn = attn + relative_position_bias.unsqueeze(0)

        attn = self.softmax(attn)

        x = torch.matmul(attn, v).transpose(1, 2).reshape(B_, N, self.embed_dim)
        x = self.proj(x)
        return x


class HATBlock(nn.Module):
    """
    Hybrid transformer block with shifted window scheme and cross-modal skip connection
    """
    def __init__(self, input_resolution, dim, num_heads, head_dim, window_size=8, shift_size=0, qkv_bias=True, mlp_ratio=4, norm_layer=nn.LayerNorm, cm_sc=True):
        super().__init__()
        self.input_resolution = input_resolution
        self.window_size = window_size
        self.shift_size = shift_size
        self.cm_sc = cm_sc
        if min(self.input_resolution) <= self.window_size:
            # if window size is larger than input resolution, we don't partition windows
            self.shift_size = 0
            self.window_size = min(self.input_resolution)
        assert 0 <= self.shift_size < self.window_size, "shift_size must in 0-window_size"

        self.norm_ms1 = norm_layer(dim)
        self.norm_pan1 = norm_layer(dim)
        self.norm_ms2 = norm_layer(dim)

        self.attn_ms = SPWAttention(dim=dim, num_heads=num_heads, head_dim=head_dim, window_size=to_2tuple(self.window_size), qkv_bias=qkv_bias)

        mlp_hidden_dim = int(dim * mlp_ratio)

        self.mlp_ms = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, out_features=dim)

        if self.cm_sc:
            self.cross_modal_proj1 = ResBlockSC(dim, dim // 2)

    def forward(self, ms, pan):
        H, W = self.input_resolution
        B, L, C = ms.shape
        assert L == H * W, "input feature has wrong size"

        shortcut_ms = ms
        shortcut_pan = pan
        ms = self.norm_ms1(ms)
        pan = self.norm_pan1(pan)
        ms = ms.view(B, H, W, C)
        pan = pan.view(B, H, W, C)

        if self.shift_size > 0:
            shifted_ms = torch.roll(ms, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))
            shifted_pan = torch.roll(pan, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))
        else:
            shifted_ms = ms
            shifted_pan = pan

        # partition windows
        ms_windows = window_partition(shifted_ms, self.window_size)  # nW*B, window_size, window_size, C
        ms_windows = ms_windows.view(-1, self.window_size * self.window_size, C)  # nW*B, window_size*window_size, C

        pan_windows = window_partition(shifted_pan, self.window_size)  # nW*B, window_size, window_size, C
        pan_windows = pan_windows.view(-1, self.window_size * self.window_size, C)  # nW*B, window_size*window_size, C

        # W-MSA/SW-MSA
        attn_ms_windows = self.attn_ms(ms_windows, pan_windows)  # nW*B, window_size*window_size, C
        if self.cm_sc:
            cross_modal_sc1 = self.cross_modal_proj1(shifted_pan.permute(0, 3, 1, 2))
            cross_modal_sc1 = window_partition(cross_modal_sc1.permute(0, 2, 3, 1), self.window_size)  # nW*B, window_size, window_size, C
            cross_modal_sc1 = cross_modal_sc1.view(-1, self.window_size * self.window_size, C)
            attn_ms_windows = attn_ms_windows + cross_modal_sc1

        attn_ms_windows = attn_ms_windows.view(-1, self.window_size, self.window_size, C)  # nW*B, window_size, window_size, C
        shifted_ms = window_reverse(attn_ms_windows, self.window_size, H, W)  # B H' W' C

        # reverse cyclic shift
        if self.shift_size > 0:
            ms = torch.roll(shifted_ms, shifts=(self.shift_size, self.shift_size), dims=(1, 2))
        else:
            ms = shifted_ms
        ms = ms.view(B, H * W, C)

        # FFN
        ms = shortcut_ms + ms
        ms = ms + self.mlp_ms(self.norm_ms2(ms))

        return ms, shortcut_pan
